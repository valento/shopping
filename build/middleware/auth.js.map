{"version":3,"sources":["../../server/middleware/auth.js"],"names":["dotenv","config","silent","getUserId","req","res","next","token","get","decoded","jwt","decode","console","log","email","getPermis","verified","verify","process","env","JWT_SECRET","api","user","getOne","then","results","membership","group","catch","err","checkAccess","password","body","credentials","usr","owner","pass","OWNER_1","PASS_1","OWNER_2","PASS_2","bcrypt","compareSync","message","status","json","errors","global","checkAuth","getAuth"],"mappings":"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","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport bcrypt from 'bcrypt'\nimport dotenv from 'dotenv'\n\nimport api from '../api/user'\n\ndotenv.config({silent: true})\n\nexport const getUserId = (req,res,next) => {\n  const token = req.get('Authorization')\n  const decoded = jwt.decode(token)\n  console.log('Auth Middleware: ', decoded)\n  req.email = decoded.email\n  //req.uid = decoded.uid\n  next()\n}\n\nexport const getPermis = (req,res,next) => {\n  const token = req.get('Authorization')\n  const verified = jwt.verify(token, process.env.JWT_SECRET)\n  const {email} = verified\n  api.user.getOne({email},'users',['membership'])\n  .then(results => {\n    console.log(results[0].membership)\n      req.group = results[0].membership\n      next()\n    }\n  )\n  .catch(err => console.log(err))\n}\n\nexport const checkAccess = (req,res,next) => {\n  const token = req.get('Authorization')\n  const password = req.body.credentials\n  if(token){\n    try {\n      const verified = jwt.verify(token, process.env.JWT_SECRET)\n      const { email } = verified\n      console.log({email})\n\n      let usr, owner = false, pass\n      switch (email) {\n        case process.env.OWNER_1:\n          usr = '1'\n          owner = true\n          pass = process.env.PASS_1\n        break\n        case process.env.OWNER_2:\n          usr = '2'\n          owner = true\n          pass = process.env.PASS_2\n        break\n        default:\n          usr = '0'\n          owner = false\n      }\n\n    if(owner){\n        api.user.getOne({email},'users',['password','memership'])\n        .then( results => {\n          console.log(bcrypt.compareSync(pass, results[0].password))\n          req.owner = true\n          req.group = 1\n        })\n        .catch(err => console.log(err.message))\n      } else {\n        req.group = 32\n      }\n    }\n    catch(err) {\n      res.status(500).json({errors: {global: 'Invalid Credentials...'}})\n    }\n  }\n  next()\n}\n\nexport const checkAuth = (req,res,next) => {\n  const { email } = req.body.user\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n      if(email !== verified.email) {\n        return res.status(401).json({errors: {global: 'Unauthorized request'}})\n      } else {\n        req.user = verified\n      }\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  }\n}\n\nexport const getAuth = (req,res,next) => {\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  } else {\n    return res.status(401).json({errors: {global: 'Unauthorized request'}})\n  }\n}\n"]}