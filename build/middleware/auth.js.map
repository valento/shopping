{"version":3,"sources":["../../server/middleware/auth.js"],"names":["getUserId","req","res","next","token","get","decoded","jwt","decode","console","log","email","checkAuth","body","user","verified","verify","status","json","errors","global","err","getAuth"],"mappings":";;;;;;;AAAA;;;;;;AAEO,IAAMA,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACzC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAMC,UAAUC,uBAAIC,MAAJ,CAAWJ,KAAX,CAAhB;AACAK,UAAQC,GAAR,CAAY,mBAAZ,EAAiCJ,OAAjC;AACAL,MAAIU,KAAJ,GAAYL,QAAQK,KAApB;;AAEAR;AACD,CAPM;;AASA,IAAMS,gCAAY,SAAZA,SAAY,CAACX,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MACjCQ,KADiC,GACvBV,IAAIY,IAAJ,CAASC,IADc,CACjCH,KADiC;;AAEzC,MAAMP,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAGD,KAAH,EAAS;AACP,QAAI;AACF,UAAMW,WAAWR,uBAAIS,MAAJ,CAAWZ,KAAX,EAAkB,mBAAlB,CAAjB;AACA,UAAGO,UAAUI,SAASJ,KAAtB,EAA6B;AAC3B,eAAOT,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,EAACC,QAAQ,sBAAT,EAAT,EAArB,CAAP;AACD,OAFD,MAEO;AACLnB,YAAIa,IAAJ,GAAWC,QAAX;AACD;AACF,KAPD,CAQA,OAAMM,GAAN,EAAW;AACT,aAAOnB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,EAACC,QAAQ,4BAAT,EAAT,EAArB,CAAP;AACD;AACDjB;AACD;AACF,CAjBM;;AAmBA,IAAMmB,4BAAU,SAAVA,OAAU,CAACrB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AACvC,MAAMC,QAAQH,IAAII,GAAJ,CAAQ,eAAR,CAAd;AACA,MAAGD,KAAH,EAAS;AACP,QAAI;AACF,UAAMW,WAAWR,uBAAIS,MAAJ,CAAWZ,KAAX,EAAkB,mBAAlB,CAAjB;AACD,KAFD,CAGA,OAAMiB,GAAN,EAAW;AACT,aAAOnB,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,EAACC,QAAQ,4BAAT,EAAT,EAArB,CAAP;AACD;AACDjB;AACD,GARD,MAQO;AACL,WAAOD,IAAIe,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,QAAQ,EAACC,QAAQ,sBAAT,EAAT,EAArB,CAAP;AACD;AACF,CAbM","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\n\nexport const getUserId = (req,res,next) => {\n  const token = req.get('Authorization')\n  const decoded = jwt.decode(token)\n  console.log('Auth Middleware: ', decoded)\n  req.email = decoded.email\n\n  next()\n}\n\nexport const checkAuth = (req,res,next) => {\n  const { email } = req.body.user\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n      if(email !== verified.email) {\n        return res.status(401).json({errors: {global: 'Unauthorized request'}})\n      } else {\n        req.user = verified\n      }\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  }\n}\n\nexport const getAuth = (req,res,next) => {\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  } else {\n    return res.status(401).json({errors: {global: 'Unauthorized request'}})\n  }\n}\n"]}