{"version":3,"sources":["../../server/middleware/auth.js"],"names":["getUserId","req","res","next","token","get","decoded","jwt","decode","console","log","email","uid","checkAdmin","verified","verify","password","api","user","getOne","then","results","length","bcrypt","compareSync","catch","err","message","status","json","errors","global","checkAuth","body","getAuth"],"mappings":"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","file":"auth.js","sourcesContent":["import jwt from 'jsonwebtoken'\nimport bcrypt from 'bcrypt'\n\nimport api from '../api/user'\n\nexport const getUserId = (req,res,next) => {\n  const token = req.get('Authorization')\n  const decoded = jwt.decode(token)\n  console.log('Auth Middleware: ', decoded)\n  req.email = decoded.email\n  req.uid = decoded.uid\n  next()\n}\n\nexport const checkAdmin = (req,res,next) => {\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n      const { email, password } = verified\n      console.log({email})\n    if(email === 'valentin.mundrov@gmail.com'){\n        api.user.getOne({email},'users',['password'])\n        .then( results => {\n          console.log(verified.password, results[0].password.length)\n          console.log(bcrypt.compareSync('19K0l0mbin075', results[0].password))\n\n        })\n        .catch(err => console.log(err.message))\n      }\n    }\n    catch(err) {\n      res.status(500).json({errors: {global: 'Invalid Credentials...'}})\n    }\n  }\n  next()\n}\n\nexport const checkAuth = (req,res,next) => {\n  const { email } = req.body.user\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n      if(email !== verified.email) {\n        return res.status(401).json({errors: {global: 'Unauthorized request'}})\n      } else {\n        req.user = verified\n      }\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  }\n}\n\nexport const getAuth = (req,res,next) => {\n  const token = req.get('Authorization')\n  if(token){\n    try {\n      const verified = jwt.verify(token, 'valeCollectionJWT')\n    }\n    catch(err) {\n      return res.status(401).json({errors: {global: 'Auth failed: Invalid token'}})\n    }\n    next()\n  } else {\n    return res.status(401).json({errors: {global: 'Unauthorized request'}})\n  }\n}\n"]}