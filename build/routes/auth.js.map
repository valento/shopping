{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","db","database","use","bodyParser","json","get","req","res","next","findUser","query","then","user","undefined","message","catch","post","console","log","body","credentials","email","scope","pass","generator","generate","length","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","mail","token","jwt","sign","username","status","credit","rating","gender","errors","global"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\n\nimport database from '../api/user'\n\nconst authRouter = express.Router()\n\nconst db = new database('./aapp.db')\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/check', (req,res,next) => {\n  db.findUser( req.query )\n  .then(user => {\n    if(!user || undefined) {\n      res.json({message: 'User is new'})\n    } else {\n      res.json({user})\n    }\n  })\n  .catch (err => {\n    res.json({message: 'Something went wrong'})\n  })\n})\n\nauthRouter.post('/', (req,res,next) => {\n  console.log('Auth Router: ', req.body.credentials)\n  const { email } = req.body.credentials\n  const scope = ['email','username','credit','rating','gender']\n  db.findUser( req.body.credentials, scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( user => db.findUser( user.mail, scope ))\n        .then( user => {\n          const token = jwt.sign({\n            email: user.email,\n            username: user.username\n          }, 'valeCollectionJWT')\n          res.status(200).json({\n            user: {\n              token: token,\n              username: user.username,\n              credit: user.credit,\n              rating: user.rating,\n              gender: user.gender\n            }\n          })\n        })\n        .catch( err => res.status(500).json({errors: {global: 'Apologies: DB failure... Please, try again!'}}))\n\n      })\n    } else {\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username\n      }, 'valeCollectionJWT')\n      user.token = token\n      res.status(200).json({ user })\n    }\n  })\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}