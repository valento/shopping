{"version":3,"sources":["../../server/routes/auth.js"],"names":["fb","clientSecret","process","env","FB_APP_SECRET","clientID","FB_APP_ID","callbackURL","FB_CALLBACK_URL","authRouter","express","Router","use","bodyParser","json","get","req","res","next","post","new_user","user","token","scope","email","body","credentials","api","getOne","then","results","length","pass","generator","generate","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","jwt","sign","JWT_SECRET","status","console","log","catch","message"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\n\nimport api from '../api/user'\n\nconst fb = {\n  clientSecret: process.env.FB_APP_SECRET,\n  clientID: process.env.FB_APP_ID,\n  callbackURL: process.env.FB_CALLBACK_URL\n}\n\nconst authRouter = express.Router()\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/facebook', (req,res,next) => {\n  //\n})\nauthRouter.get('/facebook/callback', (req,res,next) => {\n  //\n})\n\nauthRouter.get('/check', (req,res,next) => {\n  //db.findOne( req.query, 'users' )\n  //.then(user => {\n  //  if(!user || undefined) {\n  //    res.json({message: 'User is new'})\n  //  } else {\n  //    res.json({user})\n  //  }\n  //})\n  //.catch (err => {\n  //  res.json({message: 'Something went wrong'})\n  //})\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, token\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  const { email } = req.body.credentials\n\n  api.user.getOne({ email }, 'users', scope)\n  .then( results => {\n    if (results.length == 0) {\n// Sign New User:\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash( pass, bcrypt.genSalt(8,()=>{}), null, ( err,hash ) => {\n        const data = Object.assign( {password: hash}, req.body.credentials )\n        api.user.signup(data)\n        .then( () => api.user.getOne({ email }, 'users', scope))\n        .then( results => {\n          token = jwt.sign({email}, process.env.JWT_SECRET)\n          user = Object.assign({},results[0],{token: token, new_user: new_user})\n          res.status(200).json( {user} )\n        })\n      })\n    } else {\n// Send Old User Data\n      token = jwt.sign({email}, process.env.JWT_SECRET)\n      new_user = false\n      user = Object.assign({},results[0],{token: token, new_user: new_user})\n      console.log(user)\n      res.status(200).json({user})\n    }\n  })\n/*\n  db.findOne( req.body.credentials, 'users', scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( data => {\n          db.findOne( req.body.credentials, 'users', scope )\n          .then( user => {\n              const token = jwt.sign({\n                email: user.email\n              }, process.env.JWT_SECRET)\n\n              res.status(200).json( { user: {token: token, new_user: new_user}} )\n            }\n          )\n          .catch( err => console.log(err))\n        })\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username,\n        rating: user.rating,\n        gender: user.gender,\n        credit: user.credit,\n        language: user.language,\n        verified: user.verified\n      }, process.env.JWT_SECRET)\n\n      res.status(200).json({ user: { token: token, new_user: new_user }})\n\n    }\n  })\n*/\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}