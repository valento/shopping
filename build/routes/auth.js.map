{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","db","database","use","bodyParser","json","get","req","res","next","findOne","query","then","user","undefined","message","catch","post","new_user","scope","body","credentials","pass","generator","generate","length","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","token","jwt","sign","email","username","rating","gender","credit","language","verified","status","errors","global"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\n\nimport database from '../api/user'\n\nconst authRouter = express.Router()\n\nconst db = new database('./aapp.db')\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/check', (req,res,next) => {\n  db.findOne( req.query, 'users' )\n  .then(user => {\n    if(!user || undefined) {\n      res.json({message: 'User is new'})\n    } else {\n      res.json({user})\n    }\n  })\n  .catch (err => {\n    res.json({message: 'Something went wrong'})\n  })\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  db.findOne( req.body.credentials, 'users', scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then(\n          db.findOne( req.body.credentials, 'users', scope )\n          .then( user => {\n              const token = jwt.sign({\n                email: user.email,\n                username: user.username,\n                rating: user.rating,\n                gender: user.gender,\n                credit: user.credit,\n                language: user.language,\n                verified: user.verified\n              }, 'valeCollectionJWT')\n\n              res.status(200).json( { user: {token: token}} )\n            }\n          )\n        )\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username,\n        rating: user.rating,\n        gender: user.gender,\n        credit: user.credit,\n        language: user.language,\n        verified: user.verified\n      }, 'valeCollectionJWT')\n\n      res.status(200).json({ user: { token: token }})\n\n    }\n  })\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}