{"version":3,"sources":["../../server/routes/auth.js"],"names":["fb","clientSecret","process","env","FB_APP_SECRET","clientID","FB_APP_ID","callbackURL","FB_CALLBACK_URL","authRouter","express","Router","use","bodyParser","json","get","req","res","next","post","init","body","data","user","i","passes","generator","generate","length","numbers","bcrypt","hash","genSalt","err","password","email","api","signupDummies","then","status","catch","console","log","new_user","token","scope","credentials","getOne","results","pass","Object","assign","signup","jwt","sign","JWT_SECRET","message"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\n\nimport api from '../api/user'\n\nconst fb = {\n  clientSecret: process.env.FB_APP_SECRET,\n  clientID: process.env.FB_APP_ID,\n  callbackURL: process.env.FB_CALLBACK_URL\n}\n\nconst authRouter = express.Router()\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/facebook', (req,res,next) => {\n  //\n})\nauthRouter.get('/facebook/callback', (req,res,next) => {\n  //\n})\n\nauthRouter.get('/check', (req,res,next) => {\n  //db.findOne( req.query, 'users' )\n  //.then(user => {\n  //  if(!user || undefined) {\n  //    res.json({message: 'User is new'})\n  //  } else {\n  //    res.json({user})\n  //  }\n  //})\n  //.catch (err => {\n  //  res.json({message: 'Something went wrong'})\n  //})\n})\n\nauthRouter.post('/dummy', (req,res,next) => {\n  const { init } = req.body\n  let data = []\n  let user = {}\n  for(let i = init; i<(init+20); i++) {\n    let passes = generator.generate({\n      length: 8,\n      numbers: true\n    })\n    bcrypt.hash( passes, bcrypt.genSalt(8, ()=>{}), null, (err,hash) => {\n      user.password = hash\n      user.email = 'user'+i+'@mail.com'\n      api.user.signupDummies(user).then( () => res.status(200)).catch( err => console.log(err))\n    })\n  }\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, token\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  const { email } = req.body.credentials\n\n  api.user.getOne({ email }, 'users', scope)\n  .then( results => {\n    if (results.length == 0) {\n// Sign New User:\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash( pass, bcrypt.genSalt(8,()=>{}), null, ( err,hash ) => {\n        const data = Object.assign( {password: hash}, req.body.credentials )\n        api.user.signup(data)\n        .then( () => api.user.getOne({ email }, 'users', scope))\n        .then( results => {\n          token = jwt.sign({email}, process.env.JWT_SECRET)\n          user = Object.assign({},results[0],{token: token, new_user: new_user})\n          res.status(200).json( {user} )\n        })\n      })\n    } else {\n// Send Old User Data\n      token = jwt.sign({email}, process.env.JWT_SECRET)\n      new_user = false\n      user = Object.assign({},results[0],{token: token, new_user: new_user})\n      console.log(user)\n      res.status(200).json({user})\n    }\n  })\n/*\n  db.findOne( req.body.credentials, 'users', scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( data => {\n          db.findOne( req.body.credentials, 'users', scope )\n          .then( user => {\n              const token = jwt.sign({\n                email: user.email\n              }, process.env.JWT_SECRET)\n\n              res.status(200).json( { user: {token: token, new_user: new_user}} )\n            }\n          )\n          .catch( err => console.log(err))\n        })\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username,\n        rating: user.rating,\n        gender: user.gender,\n        credit: user.credit,\n        language: user.language,\n        verified: user.verified\n      }, process.env.JWT_SECRET)\n\n      res.status(200).json({ user: { token: token, new_user: new_user }})\n\n    }\n  })\n*/\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}