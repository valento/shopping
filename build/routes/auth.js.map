{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","use","bodyParser","json","get","req","res","next","db","findOne","query","then","user","undefined","message","catch","post","new_user","token","scope","email","body","credentials","api","getOne","results","length","pass","generator","generate","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","jwt","sign","process","env","JWT_SECRET","status","console","log"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\n\nimport api from '../api/user'\n\nconst authRouter = express.Router()\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/check', (req,res,next) => {\n  db.findOne( req.query, 'users' )\n  .then(user => {\n    if(!user || undefined) {\n      res.json({message: 'User is new'})\n    } else {\n      res.json({user})\n    }\n  })\n  .catch (err => {\n    res.json({message: 'Something went wrong'})\n  })\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true, user, token\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  const { email } = req.body.credentials\n\n  api.user.getOne({ email }, 'users', scope)\n  .then( results => {\n    if (results.length == 0) {\n// Sign New User:\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash( pass, bcrypt.genSalt(8,()=>{}), null, ( err,hash ) => {\n        const data = Object.assign( {password: hash}, req.body.credentials )\n        api.user.signup(data)\n        .then( () => {\n          token = jwt.sign({\n            email: data.email\n          }, process.env.JWT_SECRET)\n          res.status(200).json( { user: {token: token, new_user: new_user}} )\n        })\n      })\n    } else {\n// Send Old User Data\n      token = jwt.sign({email}, process.env.JWT_SECRET)\n      new_user = false\n      user = Object.assign({},results[0],{token: token, new_user: new_user})\n      console.log(user)\n      res.status(200).json({user})\n    }\n  })\n/*\n  db.findOne( req.body.credentials, 'users', scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( data => {\n          db.findOne( req.body.credentials, 'users', scope )\n          .then( user => {\n              const token = jwt.sign({\n                email: user.email\n              }, process.env.JWT_SECRET)\n\n              res.status(200).json( { user: {token: token, new_user: new_user}} )\n            }\n          )\n          .catch( err => console.log(err))\n        })\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username,\n        rating: user.rating,\n        gender: user.gender,\n        credit: user.credit,\n        language: user.language,\n        verified: user.verified\n      }, process.env.JWT_SECRET)\n\n      res.status(200).json({ user: { token: token, new_user: new_user }})\n\n    }\n  })\n*/\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}