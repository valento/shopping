{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","db","database","use","bodyParser","json","get","req","res","next","findUser","query","then","user","undefined","message","catch","post","new_user","scope","body","credentials","pass","generator","generate","length","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","email","console","log","token","jwt","sign","status","errors","global","username","rating","gender","credit","language","verified"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\n\nimport database from '../api/user'\n\nconst authRouter = express.Router()\n\nconst db = new database('./aapp.db')\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/check', (req,res,next) => {\n  db.findUser( req.query )\n  .then(user => {\n    if(!user || undefined) {\n      res.json({message: 'User is new'})\n    } else {\n      res.json({user})\n    }\n  })\n  .catch (err => {\n    res.json({message: 'Something went wrong'})\n  })\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true\n  const  scope = ['email','gender','username','credit','rating','language','verified']\n  db.findUser( req.body.credentials, scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( user => {\n          let { email } = user\n          console.log('After Signup Insert: ', email)\n          const token = jwt.sign({ email }, 'valeCollectionJWT')\n          res.status(200).json({\n            user: {\n              token: token,\n              new_user: new_user\n            }\n          })\n        })\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email\n      }, 'valeCollectionJWT')\n\n      res.status(200).json({ user: {\n          token: token,\n          username: user.username,\n          rating: user.rating,\n          gender: user.gender,\n          credit: user.credit,\n          language: user.language,\n          verified: user.verified\n        }\n      })\n\n    }\n  })\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}