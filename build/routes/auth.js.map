{"version":3,"sources":["../../server/routes/auth.js"],"names":["authRouter","express","Router","dotenv","config","silent","db","database","process","env","DB","use","bodyParser","json","get","req","res","next","findOne","query","then","user","undefined","message","catch","post","new_user","scope","body","credentials","pass","generator","generate","length","numbers","bcrypt","hash","genSalt","err","data","Object","assign","password","signup","token","jwt","sign","email","JWT_SECRET","status","console","log","errors","global","username","rating","gender","credit","language","verified"],"mappings":"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","file":"auth.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport generator from 'generate-password'\nimport bcrypt from 'bcrypt-nodejs'\nimport jwt from 'jsonwebtoken'\nimport dotenv from 'dotenv'\n\nimport database from '../api/user'\n\nconst authRouter = express.Router()\ndotenv.config({ silent: true })\nconst db = new database(process.env.DB)\n\nauthRouter.use(bodyParser.json())\n\nauthRouter.get('/check', (req,res,next) => {\n  db.findOne( req.query, 'users' )\n  .then(user => {\n    if(!user || undefined) {\n      res.json({message: 'User is new'})\n    } else {\n      res.json({user})\n    }\n  })\n  .catch (err => {\n    res.json({message: 'Something went wrong'})\n  })\n})\n\nauthRouter.post('/', (req,res,next) => {\n  let new_user = true\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  db.findOne( req.body.credentials, 'users', scope )\n  .then( user => {\n    if(!user || undefined) {\n      const pass = generator.generate({\n        length: 8,\n        numbers: true\n      })\n      bcrypt.hash(pass, bcrypt.genSalt(8,()=>{}), null, (err,hash) => {\n        //signup user:\n        const data = Object.assign({password: hash}, req.body.credentials)\n        db.signup( data )\n        .then( data => {\n          db.findOne( req.body.credentials, 'users', scope )\n          .then( user => {\n              const token = jwt.sign({\n                email: user.email\n              }, process.env.JWT_SECRET)\n\n              res.status(200).json( { user: {token: token, new_user: new_user}} )\n            }\n          )\n          .catch( err => console.log(err))\n        })\n        .catch( err => res.status(500).json({errors: {global: err.message}}))\n\n      })\n    } else {\n      new_user = false\n      const token = jwt.sign({\n        email: user.email,\n        username: user.username,\n        rating: user.rating,\n        gender: user.gender,\n        credit: user.credit,\n        language: user.language,\n        verified: user.verified\n      }, process.env.JWT_SECRET)\n\n      res.status(200).json({ user: { token: token, new_user: new_user }})\n\n    }\n  })\n  .catch( err => {\n    res.status(200).json({ message: 'Welcome new one' })\n  })\n})\n\nexport default authRouter\n"]}