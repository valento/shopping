{"version":3,"sources":["../../server/routes/user.js"],"names":["userRouter","express","Router","mergeParams","dotenv","config","silent","route","get","getUserId","req","res","next","email","scope","api","user","getOne","then","results","length","Object","assign","status","json","Error","message","catch","errors","global","err","post","checkAuth","body","rest","db","saveUser"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;;;AAGA,IAAMA,aAAaC,kBAAQC,MAAR,CAAe;AAChCC,eAAa;AADmB,CAAf,CAAnB;AAGA;AACAC,iBAAOC,MAAP,CAAc,EAAEC,QAAQ,IAAV,EAAd;AACA;;AAEA;AACAN,WAAWO,KAAX,CAAiB,GAAjB,EACCC,GADD,CACKC,eADL,EACgB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MACxBC,KADwB,GACdH,GADc,CACxBG,KADwB;;AAEhC,MAAMC,QAAQ,CAAC,OAAD,EAAS,UAAT,EAAoB,QAApB,EAA6B,QAA7B,EAAsC,QAAtC,EAA+C,UAA/C,EAA0D,UAA1D,CAAd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAED,CAfD;;AAiBAd,WAAWO,KAAX,CAAiB,OAAjB,EACCC,GADD,CACKC,eADL,EACgB,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MACxBC,KADwB,GACdH,GADc,CACxBG,KADwB;;AAEhC,MAAMC,QAAQ,CAAC,OAAD,EAAS,QAAT,EAAkB,UAAlB,EAA6B,UAA7B,EAAwC,QAAxC,EAAiD,QAAjD,EAA0D,UAA1D,CAAd;AACAC,iBAAIC,IAAJ,CAASC,MAAT,CAAgB,EAACJ,YAAD,EAAhB,EAAyB,OAAzB,EAAkCC,KAAlC,EACCI,IADD,CACO,UAACC,OAAD,EAAa;AAClB,QAAGA,QAAQC,MAAR,GAAiB,CAApB,EAAsB;AACpB,UAAMJ,OAAOK,OAAOC,MAAP,CAAc,EAAd,EAAkBH,QAAQ,CAAR,CAAlB,CAAb;AACAR,UAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACR,UAAD,EAArB;AACD,KAHD,MAGO;AACL,YAAM,IAAIS,KAAJ,CAAU,EAACC,SAAS,WAAV,EAAV,CAAN;AACD;AACF,GARD,EASCC,KATD,CASO,eAAO;AACZhB,QAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACI,QAAQ,EAACC,QAAQC,IAAIJ,OAAb,EAAT,EAArB;AACD,GAXD;AAYD,CAhBD,EAiBCK,IAjBD,CAiBMC,eAjBN,EAiBgB,UAACtB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAChC;AADgC,MAExBI,IAFwB,GAEfN,IAAIuB,IAFW,CAExBjB,IAFwB;;AAAA,MAGxBH,KAHwB,GAGNG,IAHM,CAGxBH,KAHwB;AAAA,MAGdqB,IAHc,4BAGNlB,IAHM;;AAIhCmB,KAAGC,QAAH,CAAYF,IAAZ,EAAkBrB,KAAlB,EACCK,IADD,CACO,eAAO;AACZ,QAAIY,GAAJ,EAAS;AACPnB,UAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACI,QAAQ,EAACC,QAAQC,IAAIJ,OAAb,EAAT,EAArB;AACD,KAFD,MAEO;AACLf,UAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACE,SAAS,YAAV,EAArB;AACD;AACF,GAPD,EAQCC,KARD,CAQO,eAAO;AACZ;AACD,GAVD;AAWD,CAhCD;;kBAkCe3B,U","file":"user.js","sourcesContent":["import express from 'express'\nimport database from '../api/user'\nimport { checkAuth, getUserId } from '../middleware/auth'\nimport dotenv from 'dotenv'\nimport api from '../api/user'\n\nconst userRouter = express.Router({\n  mergeParams: true\n})\n//userRouter.use()\ndotenv.config({ silent: true })\n//const db = new database(process.env.DB)\n\n//userRouter.all('/data',checkAuth)\nuserRouter.route('/')\n.get(getUserId, (req,res,next) => {\n  const { email } = req\n  const scope = ['email','username','credit','gender','rating','language','verified']\n\n  //if(email === 'vale@gmail.com'){\n  //  db.listAll('users')\n  //  .then( users => {\n  //    res.status(200).json({users: users})\n  //  })\n  //  .catch(err => {\n  //    res.status(500).json({errors: {global: err.message}})\n  //  })\n  //}\n\n})\n\nuserRouter.route('/data')\n.get(getUserId, (req,res,next) => {\n  const { email } = req\n  const scope = ['email','gender','username','verified','credit','rating','language']\n  api.user.getOne({email}, 'users', scope)\n  .then( (results) => {\n    if(results.length > 0){\n      const user = Object.assign({}, results[0])\n      res.status(200).json({user})\n    } else {\n      throw new Error({message: 'User lost'})\n    }\n  })\n  .catch(err => {\n    res.status(500).json({errors: {global: err.message}})\n  })\n})\n.post(checkAuth,(req,res,next) => {\n  //const { email } = req.user\n  const { user } = req.body\n  const { email, ...rest} = user\n  db.saveUser(rest, email)\n  .then( err => {\n    if (err) {\n      res.status(500).json({errors: {global: err.message}})\n    } else {\n      res.status(200).json({message: 'Data saved'})\n    }\n  })\n  .catch(err => {\n    //\n  })\n})\n\nexport default userRouter\n"]}