{"version":3,"sources":["../../server/routes/gallery.js"],"names":["galleryRouter","express","Router","mergeParams","use","bodyParser","json","get","checkAaccess","req","res","next","table","params","email","scope","api","list","getList","c_permis","then","results","length","status","Error","message","catch","errors","global","err","getUserId"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,gBAAgBC,kBAAQC,MAAR,CAAe;AACnCC,eAAa;AADsB,CAAf,CAAtB;AAGAH,cAAcI,GAAd,CAAkBC,qBAAWC,IAAX,EAAlB;;AAEA;AACA;AACA;AACA;;AAEAN,cAAcO,GAAd,CAAkB,gBAAlB,EAAoCC,YAApC,EAAkD,UAACC,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MAC1DC,KAD0D,GAChDH,IAAII,MAD4C,CAC1DD,KAD0D;AAAA,MAE1DE,KAF0D,GAEhDL,GAFgD,CAE1DK,KAF0D;;AAGlE,MAAMC,QAAQ,CAAC,KAAD,EAAO,MAAP,CAAd;AACAC,kBAAIC,IAAJ,CAASC,OAAT,CAAiB,EAACC,UAAU,GAAX,EAAjB,EAAkCP,KAAlC,EAAyCG,KAAzC,EACCK,IADD,CACO,mBAAW;AAChB,QAAGC,QAAQC,MAAR,GAAiB,CAApB,EAAsB;AACpBZ,UAAIa,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBe,OAArB;AACD,KAFD,MAEO;AACL,YAAM,IAAIG,KAAJ,CAAU,EAACC,SAAS,WAAV,EAAV,CAAN;AACD;AACF,GAPD,EAQCC,KARD,CAQQ,eAAO;AAAEhB,QAAIa,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAsB,EAACqB,QAAQ,EAACC,QAAQC,IAAIJ,OAAb,EAAT,EAAtB;AAAyD,GAR1E;AASD,CAbD;;AAeAzB,cAAcO,GAAd,CAAkB,SAAlB,EAA6BuB,eAA7B,EAAwC,UAACrB,GAAD,EAAKC,GAAL,EAASC,IAAT,EAAkB;AAAA,MAChDC,KADgD,GACtCH,IAAII,MADkC,CAChDD,KADgD;AAAA,MAEhDE,KAFgD,GAEtCL,GAFsC,CAEhDK,KAFgD;;AAGxD,MAAMC,QAAQ,CAAC,KAAD,EAAO,MAAP,CAAd;AACAC,kBAAIC,IAAJ,CAASC,OAAT,CAAiB,EAACC,UAAU,GAAX,EAAjB,EAAkCP,KAAlC,EAAyCG,KAAzC,EACCK,IADD,CACO,mBAAW;AAChB,QAAGC,QAAQC,MAAR,GAAiB,CAApB,EAAsB;AACpBZ,UAAIa,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAqBe,OAArB;AACD,KAFD,MAEO;AACL,YAAM,IAAIG,KAAJ,CAAU,EAACC,SAAS,WAAV,EAAV,CAAN;AACD;AACF,GAPD,EAQCC,KARD,CAQQ,eAAO;AAAEhB,QAAIa,MAAJ,CAAW,GAAX,EAAgBjB,IAAhB,CAAsB,EAACqB,QAAQ,EAACC,QAAQC,IAAIJ,OAAb,EAAT,EAAtB;AAAyD,GAR1E;AASD,CAbD;;kBAeezB,a","file":"gallery.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport api from '../api/lists'\nimport { checkAuth, getAuth, getUserId } from '../middleware/auth'\nimport dotenv from 'dotenv'\n\nconst galleryRouter = express.Router({\n  mergeParams: true\n})\ngalleryRouter.use(bodyParser.json())\n\n//galleryRouter.get('/:table/:gender/:cat', (req,res,next) => {\n//  const { table,gender,cat } = req.params\n//  api.mann.getList( { gender,cat }, table, '*').then( rows => console.log(rows))\n//})\n\ngalleryRouter.get('/access/:table', checkAaccess, (req,res,next) => {\n  const { table } = req.params\n  const { email } = req\n  const scope = ['uid','name']\n  api.list.getList({c_permis: 500}, table, scope)\n  .then( results => {\n    if(results.length > 0){\n      res.status(200).json(results)\n    } else {\n      throw new Error({message: 'User lost'})\n    }\n  })\n  .catch( err => { res.status(500).json( {errors: {global: err.message}} ) })\n})\n\ngalleryRouter.get('/:table', getUserId, (req,res,next) => {\n  const { table } = req.params\n  const { email } = req\n  const scope = ['uid','name']\n  api.list.getList({c_permis: 500}, table, scope)\n  .then( results => {\n    if(results.length > 0){\n      res.status(200).json(results)\n    } else {\n      throw new Error({message: 'User lost'})\n    }\n  })\n  .catch( err => { res.status(500).json( {errors: {global: err.message}} ) })\n})\n\nexport default galleryRouter\n"]}