{"version":3,"sources":["../../server/routes/gallery.js"],"names":["galleryRouter","express","Router","mergeParams","use","bodyParser","json","get","getPermis","req","res","next","params","table","level","group","gr","permis","scope","listapi","list","getList","c_group","then","results","length","status","Error","message","catch","errors","global","err","getUserId","id","socapi","getSocial","resource_id","data","liked","viewed","shared","ordered","interested","forEach","Object","keys","entry","e","email","c_permis","post","console","log","body","user_id","uid","addSocial","success"],"mappings":"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","file":"gallery.js","sourcesContent":["import express from 'express'\nimport bodyParser from 'body-parser'\nimport listapi from '../api/lists'\nimport socapi from '../api/social'\nimport { checkAuth, checkAccess, getUserId, getPermis } from '../middleware/auth'\nimport dotenv from 'dotenv'\n\nconst galleryRouter = express.Router({\n  mergeParams: true\n})\ngalleryRouter.use(bodyParser.json())\n\n//galleryRouter.get('/:table/:gender/:cat', (req,res,next) => {\n//  const { table,gender,cat } = req.params\n//  api.mann.getList( { gender,cat }, table, '*').then( rows => console.log(rows))\n//})\n\ngalleryRouter.get('/access/:table/:level', getPermis, (req,res,next) => {//checkAccess,\n  const { table,level } = req.params\n  const { group } = req\n  let gr = (group < 8) ? 8 : group\n  let permis\n  switch(group){\n    case 16 :\n      permis = 480\n    break\n    case 8 :\n      permis = 480\n    break\n    break\n    case 4 :\n      permis = 480\n    break\n    default :\n    permis = 500\n  }\n  //if()\n  const scope = ['uid','name','created_at','price']\n  listapi.list.getList({c_group: gr}, table, scope)\n  .then( results => {\n    if(results.length > 0){\n      res.status(200).json(results)\n    } else {\n      throw new Error({message: 'User lost'})\n    }\n  })\n  .catch( err => {res.status(500).json({errors: {global: err.message}})})\n})\n\ngalleryRouter.get('/:table/:id', getUserId, (req,res,next) => {\n  const { table,id } = req.params\n  const scope = ['liked','viewed','interested','ordered','shared']\n  socapi.getSocial({resource_id: id}, table, scope)\n  .then( results => {\n    let data = {\n      liked: 1080,\n      viewed: 2210,\n      shared: 0,\n      ordered: 0,\n      interested: 0\n    }\n    if(results.length > 0){\n      results.forEach( entry => {\n        Object.keys(entry).forEach( e => {\n          if(entry[e] !== null) return data[e] += 1\n        })\n      })\n      res.status(200).json(data)\n    } else {\n      throw new Error({message: 'No resources'})\n    }\n  })\n  .catch( err => { res.status(500).json({errors: {global: err.message}})})\n})\n\ngalleryRouter.get('/:table', getUserId, (req,res,next) => {\n  const { table } = req.params\n  const { email } = req\n  const scope = ['uid','name','created_at','price']\n  listapi.list.getList({c_permis: 500}, table, scope)\n  .then( results => {\n    if(results.length > 0){\n      res.status(200).json(results)\n    } else {\n      throw new Error({message: 'No resources'})\n    }\n  })\n  .catch( err => { res.status(500).json({errors: {global: err.message}})})\n})\n\ngalleryRouter.post('/:table', getUserId, (req,res,next) => {\nconsole.log(req.body)\n  const { data } = req.body\n  data.user_id = req.uid\n  socapi.addSocial({ data },req.params.table).then( results => {\n    res.status(200).json({success:true})\n  })\n  .catch(err => res.status(500))\n})\n\nexport default galleryRouter\n"]}