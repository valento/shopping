{"version":3,"sources":["../../server/api/user.js"],"names":["config","require","options","user","get","password","database","socketPath","host","db","mysql","createConnection","signup","params","email","data","push","entries","Object","keys","map","sql","Promise","resolve","reject","query","err","signupDummies","login","getAll","getOne","table","scope","s","key","k","results","create","save","upd","update","delete"],"mappings":"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","file":"user.js","sourcesContent":["import mysql from 'mysql'\n\nconst config = require('../../config')\n\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: 'aappdb'\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && config.get('NODE_ENV') === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n  options.database = 'aappdb'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n  user: {\n    signup: data => {\n      let params = []\n      const { email, password } = data\n      params.push(email,password)\n      let entries = Object.keys(data).map( key => { return '?'})\n      const sql = `INSERT INTO users(email,password) VALUES(${entries})`;\n      return new Promise( (resolve, reject ) => {\n        db.query(sql, params, ( err ) => {\n          if(err) return reject(err)\n          resolve()\n        })\n      })\n    },\n    signupDummies: user => {\n      let params = []\n      const { email, password } = user\n      params.push(email,password)\n      const sql = `INSERT INTO users(email,password) VALUES(?,?)`;\n      return new Promise( (resolve, reject ) => {\n        db.query(sql, params, ( err ) => {\n          if(err) return reject(err)\n          resolve()\n        })\n      })\n    },\n    login: () => {},\n    getAll: () => {},\n    getOne: (data={},table,scope=['email']) => {\n      const s = Object.keys(data).map( key => data[key] )\n      const k = Object.keys(data)\n      const sql = `SELECT ${scope} from users where ${k}=?;`\n      return new Promise( (resolve,reject) => {\n        db.query( sql, s,( err,results ) => {\n          if(err) {\n            reject(err)\n          } else {\n            resolve(results)\n          }\n        } )\n      } )\n    },\n    create: () => {},\n    save: (user={}, email) => {\n      const {data} = user\n      let params = []\n      const upd = Object.keys(data).map( k => {\n        params.push(data[k])\n        return `${k}=?`\n      })\n      params.push(email)\n      const sql = `UPDATE users set ${upd} WHERE email=?`\n      return new Promise( (resolve,reject ) => {\n        db.query(sql,params, (err,results) => {\n          if (err) return reject(err)\n          resolve()\n        })\n      })\n    },\n    update: () => {},\n    delete: () => {},\n  }\n}\n"]}