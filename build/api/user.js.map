{"version":3,"sources":["../../server/api/user.js"],"names":["database","url","fs","stat","err","db","SQLite","Database","console","log","prototype","findUser","data","scope","that","s","Object","keys","map","key","k","sql","Promise","resolve","reject","get","row","message","getUser","email","errors","global","signup","password","params","$email","$password","stm","prepare","run","saveUser","q","assign","set"],"mappings":"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","file":"user.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database ( url ) {\n  try {\n    fs.stat(url, ( err ) => {\n      if(!err) {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) {\n            console.log('DB connected!')\n          } else {\n            throw err\n          }\n        })\n      } else {\n        throw err\n      }\n    })\n  }\n  catch(err) {\n    console.log('DB Problems : ', err)\n  }\n}\n\ndatabase.prototype.findUser = function(data={}, scope=['email']) {\n  const that = this\n  const s = Object.keys(data).map( key => data[key] )\n  const k = Object.keys(data)\n  console.log(s,k)\n  const sql = `SELECT ${scope} FROM users WHERE ${k} = ?`\n  return new Promise((resolve,reject) => {\n    that.db.get(sql, s, (err,row) => {\n      if(err) {\n        console.log('Find User error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB get returns: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.getUser = function( data={}, scope=['email']) {\n  console.log('DB get User: ', data.email)\n  const that = this\n  const { email } = data\n  const sql = `SELECT ${scope} FROM users WHERE email = ?`\n  console.log(sql, email)\n  return new Promise (( resolve, reject ) => {\n    that.db.get(sql, email, (err,row) => {\n      if(err){\n        reject({errors: { global: 'Wrong DB'}})\n      } else {\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.signup = function(data){\n  const that = this\n  const { email, password } = data\n  const params = {\n    $email: email,\n    $password: password\n  }\n  const sql = 'INSERT INTO users (email,password) VALUES ($email,$password)'\n  const stm = that.db.prepare(sql)\n  return new Promise((resolve, reject) => {\n    stm.run( params, err => {\n      console.log('DB Insert: ', params)\n      if(err) {\n        reject({message: 'Nothing saved'})\n      } else {\n        console.log('DB Insert returns: ', data);\n        resolve (data)\n      }\n    })\n  })\n}\n\ndatabase.prototype.saveUser = function(data={}, q=[]) {\n  const that = this\n  const params = Object.assign({},data)\n  const set = Object.keys(data).map( key => `${key} = '${data[key]}'`)\n  const sql = `UPDATE users SET ${set} WHERE email = '${q}'`\n  console.log(sql, set)\n  return new Promise((resolve,reject) => {\n    that.db.run(sql, err => {\n      if(err){\n        console.log(err)\n        reject({errors: { global: err.message }})\n      } else {\n        console.log(this)\n        resolve()\n      }\n    })\n  })\n}\n\nexport default database\n"]}