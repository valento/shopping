{"version":3,"sources":["../../server/api/user.js"],"names":["database","url","fs","stat","err","db","SQLite","Database","console","log","prototype","findOne","data","table","scope","that","s","Object","keys","map","key","k","sql","Promise","resolve","reject","get","row","message","listAll","signup","email","password","params","$email","$password","stm","prepare","run","saveUser","q","assign","set","errors","global"],"mappings":"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","file":"user.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database ( url ) {\n  try {\n    fs.stat(url, ( err ) => {\n      if(!err) {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) {\n            console.log('DB connected!')\n          } else {\n            throw err\n          }\n        })\n      } else {\n        throw err\n      }\n    })\n  }\n  catch(err) {\n    console.log('DB Problems : ', err)\n  }\n}\n\ndatabase.prototype.findOne = function(data={},table,scope=['email']) {\n  const that = this\n  const s = Object.keys(data).map( key => data[key] )\n  const k = Object.keys(data)\n  const sql = `SELECT ${scope} FROM ${table} WHERE ${k} = ?`\n  console.log(sql)\n  return new Promise((resolve,reject) => {\n    that.db.get(sql, s, (err,row) => {\n      if(err) {\n        console.log('Find User error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB get returns: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.listAll = function( table ) {\n  const that = this\n  const sql = `SELECT * FROM ${table}`\n  console.log(sql)\n  return new Promise((resolve,reject) => {\n    that.db.get(sql, (err,row) => {\n      if(err) {\n        console.log('Find User error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB get returns: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.signup = function(data){\n  const that = this\n  const { email, password } = data\n  const params = {\n    $email: email,\n    $password: password\n  }\n  const sql = 'INSERT INTO users (email,password) VALUES ($email,$password)'\n  const stm = that.db.prepare(sql)\n  return new Promise((resolve, reject) => {\n    stm.run( params, err => {\n      console.log('DB Insert: ', params)\n      if(err) {\n        reject({message: 'Nothing saved'})\n      } else {\n        console.log('DB Insert returns: ', data);\n        resolve (data)\n      }\n    })\n  })\n}\n\ndatabase.prototype.saveUser = function(data={}, q=[]) {\n  const that = this\n  const params = Object.assign({},data)\n  const set = Object.keys(data).map( key => `${key} = '${data[key]}'`)\n  const sql = `UPDATE users SET ${set} WHERE email = '${q}'`\n  console.log(sql, set)\n  return new Promise((resolve,reject) => {\n    that.db.run(sql, err => {\n      if(err){\n        console.log(err)\n        reject({errors: { global: err.message }})\n      } else {\n        console.log(this)\n        resolve()\n      }\n    })\n  })\n}\n\n\n/*\ndatabase.prototype.getUser = function( data={}, table='user', scope=['email']) {\n  console.log('DB get User: ', data.email)\n  const that = this\n  const { email } = data\n  const sql = `SELECT ${scope} FROM ${table} WHERE email = ?`\n  console.log(sql, email)\n  return new Promise (( resolve, reject ) => {\n    that.db.get(sql, email, (err,row) => {\n      if(err){\n        reject({errors: { global: 'Wrong DB'}})\n      } else {\n        resolve(row)\n      }\n    })\n  })\n}\n*/\n\n\nexport default database\n"]}