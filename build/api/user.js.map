{"version":3,"sources":["../../server/api/user.js"],"names":["database","url","fs","stat","err","db","SQLite","Database","console","log","prototype","findUser","data","result","that","s","Object","keys","map","key","k","sql","Promise","resolve","reject","get","row","signup","email","password","params","$email","$password","stm","prepare","run","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,QAAT,CAAoBC,GAApB,EAA0B;AAAA;;AACxB,MAAI;AACFC,iBAAGC,IAAH,CAAQF,GAAR,EAAa,UAAEG,GAAF,EAAW;AACtB,UAAG,CAACA,GAAJ,EAAS;AACP,cAAKC,EAAL,GAAU,IAAIC,iBAAOC,QAAX,CAAoBN,GAApB,EAAyB,eAAO;AACxC,cAAG,CAACG,GAAJ,EAAS;AACPI,oBAAQC,GAAR,CAAY,eAAZ;AACD,WAFD,MAEO;AACL,kBAAML,GAAN;AACD;AACF,SANS,CAAV;AAOD,OARD,MAQO;AACL,cAAMA,GAAN;AACD;AACF,KAZD;AAaD,GAdD,CAeA,OAAMA,GAAN,EAAW;AACTI,YAAQC,GAAR,CAAY,gBAAZ,EAA8BL,GAA9B;AACD;AACF;;AAEDJ,SAASU,SAAT,CAAmBC,QAAnB,GAA8B,YAAoC;AAAA,MAA3BC,IAA2B,uEAAtB,EAAsB;AAAA,MAAlBC,MAAkB,uEAAX,CAAC,OAAD,CAAW;;AAChE,MAAMC,OAAO,IAAb;AACA,MAAMC,IAAIC,OAAOC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAuB;AAAA,WAAON,KAAKO,GAAL,CAAP;AAAA,GAAvB,CAAV;AACA,MAAMC,IAAIJ,OAAOC,IAAP,CAAYL,IAAZ,CAAV;AACA;AACA,MAAMS,kBAAgBR,MAAhB,0BAA2CO,CAA3C,SAAN;AACA,SAAO,IAAIE,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrCV,SAAKT,EAAL,CAAQoB,GAAR,CAAYJ,GAAZ,EAAiBN,CAAjB,EAAoB,UAACX,GAAD,EAAKsB,GAAL,EAAa;AAC/B,UAAGtB,GAAH,EAAQ;AACNoB,eAAOpB,GAAP;AACD,OAFD,MAEO;AACLI,gBAAQC,GAAR,CAAY,MAAZ,EAAoBiB,GAApB;AACAH,gBAAQG,GAAR;AACD;AACF,KAPD;AAQD,GATM,CAAP;AAUD,CAhBD;;AAkBA1B,SAASU,SAAT,CAAmBiB,MAAnB,GAA4B,UAASf,IAAT,EAAc;AACxC,MAAME,OAAO,IAAb;AADwC,MAEhCc,KAFgC,GAEZhB,IAFY,CAEhCgB,KAFgC;AAAA,MAEzBC,QAFyB,GAEZjB,IAFY,CAEzBiB,QAFyB;;AAGxC,MAAMC,SAAS;AACbC,YAAQH,KADK;AAEbI,eAAWH;AAFE,GAAf;AAIA,MAAMR,MAAM,8DAAZ;AACA,MAAMY,MAAMnB,KAAKT,EAAL,CAAQ6B,OAAR,CAAgBb,GAAhB,CAAZ;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCS,QAAIE,GAAJ,CAASL,MAAT,EAAiB,eAAO;AACtBtB,cAAQC,GAAR,CAAY,aAAZ,EAA2BqB,MAA3B;AACA,UAAG1B,GAAH,EAAQ;AACNoB,eAAO,EAACY,SAAS,eAAV,EAAP;AACD,OAFD,MAEO;AACLb,gBAASX,IAAT;AACD;AACF,KAPD;AAQD,GATM,CAAP;AAUD,CAnBD;;kBAqBeZ,Q","file":"user.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database ( url ) {\n  try {\n    fs.stat(url, ( err ) => {\n      if(!err) {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) {\n            console.log('DB connected!')\n          } else {\n            throw err\n          }\n        })\n      } else {\n        throw err\n      }\n    })\n  }\n  catch(err) {\n    console.log('DB Problems : ', err)\n  }\n}\n\ndatabase.prototype.findUser = function(data={}, result=['email']) {\n  const that = this\n  const s = Object.keys(data).map( key => data[key] )\n  const k = Object.keys(data)\n  //console.log(search)\n  const sql = `SELECT ${result} FROM users WHERE ${k} = ?`\n  return new Promise((resolve,reject) => {\n    that.db.get(sql, s, (err,row) => {\n      if(err) {\n        reject(err)\n      } else {\n        console.log('DB: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.signup = function(data){\n  const that = this\n  const { email, password } = data\n  const params = {\n    $email: email,\n    $password: password\n  }\n  const sql = 'INSERT INTO users (email,password) VALUES ($email,$password)'\n  const stm = that.db.prepare(sql)\n  return new Promise((resolve, reject) => {\n    stm.run( params, err => {\n      console.log('DB Insert: ', params)\n      if(err) {\n        reject({message: 'Nothing saved'})\n      } else {\n        resolve (data)\n      }\n    })\n  })\n}\n\nexport default database\n"]}