{"version":3,"sources":["../../server/api/user.js"],"names":["config","require","options","user","get","password","database","socketPath","host","db","mysql","createConnection","signup","params","email","data","push","entries","Object","keys","map","sql","Promise","resolve","reject","query","err","login","getAll","getOne","table","scope","s","key","k","results","create","save","upd","update","delete"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,SAASC,QAAQ,cAAR,CAAf;;AAEA,IAAMC,UAAU;AACdC,QAAMH,OAAOI,GAAP,CAAW,YAAX,CADQ;AAEdC,YAAUL,OAAOI,GAAP,CAAW,gBAAX,CAFI;AAGdE,YAAU;AAHI,CAAhB;;AAMA,IAAIN,OAAOI,GAAP,CAAW,0BAAX,KAA0CJ,OAAOI,GAAP,CAAW,UAAX,MAA2B,YAAzE,EAAwF;AACtFF,UAAQK,UAAR,kBAAkCP,OAAOI,GAAP,CAAW,0BAAX,CAAlC;AACD,CAFD,MAEO;AACLF,UAAQM,IAAR,GAAe,WAAf;AACAN,UAAQI,QAAR,GAAmB,QAAnB;AACD;;AAED,IAAMG,KAAKC,gBAAMC,gBAAN,CAAuBT,OAAvB,CAAX;;kBAEe;AACbC,QAAM;AACJS,YAAQ,sBAAQ;AACd,UAAIC,SAAS,EAAb;AADc,UAENC,KAFM,GAEcC,IAFd,CAEND,KAFM;AAAA,UAECT,QAFD,GAEcU,IAFd,CAECV,QAFD;;AAGdQ,aAAOG,IAAP,CAAYF,KAAZ,EAAkBT,QAAlB;AACA,UAAIY,UAAUC,OAAOC,IAAP,CAAYJ,IAAZ,EAAkBK,GAAlB,CAAuB,eAAO;AAAE,eAAO,GAAP;AAAW,OAA3C,CAAd;AACA,UAAMC,oDAAkDJ,OAAlD,MAAN;AACA,aAAO,IAAIK,OAAJ,CAAa,UAACC,OAAD,EAAUC,MAAV,EAAsB;AACxCf,WAAGgB,KAAH,CAASJ,GAAT,EAAcR,MAAd,EAAsB,UAAEa,GAAF,EAAW;AAC/B,cAAGA,GAAH,EAAQ,OAAOF,OAAOE,GAAP,CAAP;AACRH;AACD,SAHD;AAID,OALM,CAAP;AAMD,KAbG;AAcJI,WAAO,iBAAM,CAAE,CAdX;AAeJC,YAAQ,kBAAM,CAAE,CAfZ;AAgBJC,YAAQ,kBAAmC;AAAA,UAAlCd,IAAkC,uEAA7B,EAA6B;AAAA,UAA1Be,KAA0B;AAAA,UAApBC,KAAoB,uEAAd,CAAC,OAAD,CAAc;;AACzC,UAAMC,IAAId,OAAOC,IAAP,CAAYJ,IAAZ,EAAkBK,GAAlB,CAAuB;AAAA,eAAOL,KAAKkB,GAAL,CAAP;AAAA,OAAvB,CAAV;AACA,UAAMC,IAAIhB,OAAOC,IAAP,CAAYJ,IAAZ,CAAV;AACA,UAAMM,kBAAgBU,KAAhB,0BAA0CG,CAA1C,QAAN;AACA,aAAO,IAAIZ,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCf,WAAGgB,KAAH,CAAUJ,GAAV,EAAeW,CAAf,EAAiB,UAAEN,GAAF,EAAMS,OAAN,EAAmB;AAClC,cAAGT,GAAH,EAAQ;AACNF,mBAAOE,GAAP;AACD,WAFD,MAEO;AACLH,oBAAQY,OAAR;AACD;AACF,SAND;AAOD,OARM,CAAP;AASD,KA7BG;AA8BJC,YAAQ,kBAAM,CAAE,CA9BZ;AA+BJC,UAAM,gBAAoB;AAAA,UAAnBlC,IAAmB,uEAAd,EAAc;AAAA,UAAVW,KAAU;AAAA,UACjBC,IADiB,GACTZ,IADS,CACjBY,IADiB;;AAExB,UAAIF,SAAS,EAAb;AACA,UAAMyB,MAAMpB,OAAOC,IAAP,CAAYJ,IAAZ,EAAkBK,GAAlB,CAAuB,aAAK;AACtCP,eAAOG,IAAP,CAAYD,KAAKmB,CAAL,CAAZ;AACA,eAAUA,CAAV;AACD,OAHW,CAAZ;AAIArB,aAAOG,IAAP,CAAYF,KAAZ;AACA,UAAMO,4BAA0BiB,GAA1B,mBAAN;AACA,aAAO,IAAIhB,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAqB;AACvCf,WAAGgB,KAAH,CAASJ,GAAT,EAAaR,MAAb,EAAqB,UAACa,GAAD,EAAKS,OAAL,EAAiB;AACpC,cAAIT,GAAJ,EAAS,OAAOF,OAAOE,GAAP,CAAP;AACTH;AACD,SAHD;AAID,OALM,CAAP;AAMD,KA9CG;AA+CJgB,YAAQ,kBAAM,CAAE,CA/CZ;AAgDJC,YAAQ,mBAAM,CAAE;AAhDZ;;AAuDR;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAoBA;;AArKe,C","file":"user.js","sourcesContent":["import mysql from 'mysql'\n\nconst config = require('../../config')\n\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: 'aappdb'\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && config.get('NODE_ENV') === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n  options.database = 'aappdb'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n  user: {\n    signup: data => {\n      let params = []\n      const { email, password } = data\n      params.push(email,password)\n      let entries = Object.keys(data).map( key => { return '?'})\n      const sql = `INSERT INTO users(email,password) VALUES(${entries})`;\n      return new Promise( (resolve, reject ) => {\n        db.query(sql, params, ( err ) => {\n          if(err) return reject(err)\n          resolve()\n        })\n      })\n    },\n    login: () => {},\n    getAll: () => {},\n    getOne: (data={},table,scope=['email']) => {\n      const s = Object.keys(data).map( key => data[key] )\n      const k = Object.keys(data)\n      const sql = `SELECT ${scope} from users where ${k}=?;`\n      return new Promise( (resolve,reject) => {\n        db.query( sql, s,( err,results ) => {\n          if(err) {\n            reject(err)\n          } else {\n            resolve(results)\n          }\n        } )\n      } )\n    },\n    create: () => {},\n    save: (user={}, email) => {\n      const {data} = user\n      let params = []\n      const upd = Object.keys(data).map( k => {\n        params.push(data[k])\n        return `${k}=?`\n      })\n      params.push(email)\n      const sql = `UPDATE users set ${upd} WHERE email=?`\n      return new Promise( (resolve,reject ) => {\n        db.query(sql,params, (err,results) => {\n          if (err) return reject(err)\n          resolve()\n        })\n      })\n    },\n    update: () => {},\n    delete: () => {},\n  }\n}\n\n\n\n\n// ============================================================================\n// ============================================================================\n/*\ndatabase.prototype.findOne = function(data={},table,scope=['email']) {\n  const that = this\n  const s = Object.keys(data).map( key => data[key] )\n  const k = Object.keys(data)\n  const sql = `SELECT ${scope} FROM ${table} WHERE ${k} = ?`\n  console.log(sql)\n  return new Promise((resolve,reject) => {\n    that.db.get(sql, s, (err,row) => {\n      if(err) {\n        console.log('Find User error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB find One user returns: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.listAll = function( table ) {\n  const that = this\n  const sql = `SELECT * FROM ${table}`\n  console.log(sql)\n  return new Promise((resolve,reject) => {\n    that.db.all(sql, (err,row) => {\n      if(err) {\n        console.log('Find User error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB get returns: ', row)\n        resolve(row)\n      }\n    })\n  })\n}\n\ndatabase.prototype.signup = function(data){\n  const that = this\n  const { email, password } = data\n  const params = {\n    $email: email,\n    $password: password\n  }\n  const sql = 'INSERT INTO users (email,password) VALUES ($email,$password)'\n  const stm = that.db.prepare(sql)\n  return new Promise((resolve, reject) => {\n    stm.run( params, err => {\n      console.log('DB Insert: ', params)\n      if(err) {\n        reject({message: 'Nothing saved'})\n      } else {\n        console.log('DB Insert returns: ', data);\n        resolve (data)\n      }\n    })\n  })\n}\n\ndatabase.prototype.saveUser = function(data={}, q=[]) {\n  const that = this\n  const params = Object.assign({},data)\n  const set = Object.keys(data).map( key => `${key} = '${data[key]}'`)\n  const sql = `UPDATE users SET ${set} WHERE email = '${q}'`\n  console.log(sql, set)\n  return new Promise((resolve,reject) => {\n    that.db.run(sql, err => {\n      if(err){\n        console.log(err)\n        reject({errors: { global: err.message }})\n      } else {\n        console.log(this)\n        resolve()\n      }\n    })\n  })\n}\n*/\n\n/*\n  db.query(\n    query,\n    params,\n    cb\n  )\n*/\n\n/*\ndatabase.prototype.getUser = function( data={}, table='user', scope=['email']) {\n  console.log('DB get User: ', data.email)\n  const that = this\n  const { email } = data\n  const sql = `SELECT ${scope} FROM ${table} WHERE email = ?`\n  console.log(sql, email)\n  return new Promise (( resolve, reject ) => {\n    that.db.get(sql, email, (err,row) => {\n      if(err){\n        reject({errors: { global: 'Wrong DB'}})\n      } else {\n        resolve(row)\n      }\n    })\n  })\n}\n*/\n\n\n//export default database\n"]}