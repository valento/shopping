{"version":3,"sources":["../../server/api/product.js"],"names":["database","url","fs","stat","err","db","SQLite","Database","console","log","prototype","getList","data","table","scope","that","s","Object","keys","map","key","k","sql","Promise","resolve","reject","all","rows","message","length","saveItem","q","params","assign","set","run","errors","global"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,SAASA,QAAT,CAAoBC,GAApB,EAA0B;AAAA;;AACxB,MAAI;AACFC,iBAAGC,IAAH,CAAQF,GAAR,EAAa,UAAEG,GAAF,EAAW;AACtB,UAAG,CAACA,GAAJ,EAAS;AACP,cAAKC,EAAL,GAAU,IAAIC,iBAAOC,QAAX,CAAoBN,GAApB,EAAyB,eAAO;AACxC,cAAG,CAACG,GAAJ,EAAS;AACPI,oBAAQC,GAAR,CAAY,eAAZ;AACD,WAFD,MAEO;AACL,kBAAML,GAAN;AACD;AACF,SANS,CAAV;AAOD,OARD,MAQO;AACL,cAAMA,GAAN;AACD;AACF,KAZD;AAaD,GAdD,CAeA,OAAMA,GAAN,EAAW;AACTI,YAAQC,GAAR,CAAY,gBAAZ,EAA8BL,GAA9B;AACD;AACF;;AAEDJ,SAASU,SAAT,CAAmBC,OAAnB,GAA6B,YAAoC;AAAA,MAA3BC,IAA2B,uEAAtB,EAAsB;AAAA,MAAlBC,KAAkB;AAAA,MAAXC,KAAW,uEAAL,GAAK;;AAC/D,MAAMC,OAAO,IAAb;AACA,MAAMC,IAAIC,OAAOC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAuB,eAAO;AACtC,WAAOP,KAAKQ,GAAL,CAAP;AACD,GAFS,CAAV;AAGA,MAAMC,IAAIJ,OAAOC,IAAP,CAAYN,IAAZ,CAAV;AACAJ,UAAQC,GAAR,CAAYO,CAAZ,EAAcK,CAAd;AACA,MAAMC,kBAAgBR,KAAhB,cAA8BD,KAA9B,sBAAN;AACA,SAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrCV,SAAKV,EAAL,CAAQqB,GAAR,CAAYJ,GAAZ,EAAiBN,CAAjB,EAAoB,UAACZ,GAAD,EAAKuB,IAAL,EAAc;AAChC,UAAGvB,GAAH,EAAQ;AACNI,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCL,IAAIwB,OAAtC;AACAH,eAAOrB,GAAP;AACD,OAHD,MAGO;AACLI,gBAAQC,GAAR,CAAY,kBAAZ,EAAgCkB,KAAKE,MAArC;AACAL,gBAAQG,IAAR;AACD;AACF,KARD;AASD,GAVM,CAAP;AAWD,CAnBD;;AAqBA3B,SAASU,SAAT,CAAmBoB,QAAnB,GAA8B,YAAwB;AAAA;;AAAA,MAAflB,IAAe,uEAAV,EAAU;AAAA,MAANmB,CAAM,uEAAJ,EAAI;;AACpD,MAAMhB,OAAO,IAAb;AACA,MAAMiB,SAASf,OAAOgB,MAAP,CAAc,EAAd,EAAiBrB,IAAjB,CAAf;AACA,MAAMsB,MAAMjB,OAAOC,IAAP,CAAYN,IAAZ,EAAkBO,GAAlB,CAAuB;AAAA,WAAUC,GAAV,aAAoBR,KAAKQ,GAAL,CAApB;AAAA,GAAvB,CAAZ;AACA,MAAME,4BAA0BY,GAA1B,yBAAgDH,CAAhD,OAAN;AACAvB,UAAQC,GAAR,CAAYa,GAAZ,EAAiBY,GAAjB;AACA,SAAO,IAAIX,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACrCV,SAAKV,EAAL,CAAQ8B,GAAR,CAAYb,GAAZ,EAAiB,eAAO;AACtB,UAAGlB,GAAH,EAAO;AACLI,gBAAQC,GAAR,CAAYL,GAAZ;AACAqB,eAAO,EAACW,QAAQ,EAAEC,QAAQjC,IAAIwB,OAAd,EAAT,EAAP;AACD,OAHD,MAGO;AACLpB,gBAAQC,GAAR,CAAY,MAAZ;AACAe;AACD;AACF,KARD;AASD,GAVM,CAAP;AAWD,CAjBD;;kBAmBexB,Q","file":"product.js","sourcesContent":["import SQLite from 'sqlite3'\nimport fs from 'fs'\n\nfunction database ( url ) {\n  try {\n    fs.stat(url, ( err ) => {\n      if(!err) {\n        this.db = new SQLite.Database(url, err => {\n          if(!err) {\n            console.log('DB connected!')\n          } else {\n            throw err\n          }\n        })\n      } else {\n        throw err\n      }\n    })\n  }\n  catch(err) {\n    console.log('DB Problems : ', err)\n  }\n}\n\ndatabase.prototype.getList = function(data={}, table, scope='*') {\n  const that = this\n  const s = Object.keys(data).map( key => {\n    return data[key]\n  } )\n  const k = Object.keys(data)\n  console.log(s,k)\n  const sql = `SELECT ${scope} FROM ${table} WHERE domain = ?`\n  return new Promise((resolve,reject) => {\n    that.db.all(sql, s, (err,rows) => {\n      if(err) {\n        console.log('Find Items error: ', err.message);\n        reject(err)\n      } else {\n        console.log('DB get returns: ', rows.length)\n        resolve(rows)\n      }\n    })\n  })\n}\n\ndatabase.prototype.saveItem = function(data={}, q=[]) {\n  const that = this\n  const params = Object.assign({},data)\n  const set = Object.keys(data).map( key => `${key} = '${data[key]}'`)\n  const sql = `UPDATE users SET ${set} WHERE email = '${q}'`\n  console.log(sql, set)\n  return new Promise((resolve,reject) => {\n    that.db.run(sql, err => {\n      if(err){\n        console.log(err)\n        reject({errors: { global: err.message }})\n      } else {\n        console.log(this)\n        resolve()\n      }\n    })\n  })\n}\n\nexport default database\n"]}