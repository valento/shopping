{"version":3,"sources":["../../server/api/lists.js"],"names":["config","require","options","user","get","password","database","socketPath","host","db","mysql","createConnection","list","getList","data","table","scope","s","Object","keys","map","key","k","sql","console","log","Promise","resolve","reject","query","err","results","getListResources"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAMA,SAASC,QAAQ,cAAR,CAAf;;AAEA,IAAMC,UAAU;AACdC,QAAMH,OAAOI,GAAP,CAAW,YAAX,CADQ;AAEdC,YAAUL,OAAOI,GAAP,CAAW,gBAAX,CAFI;AAGdE,YAAU;AAHI,CAAhB;;AAMA,IAAIN,OAAOI,GAAP,CAAW,0BAAX,KAA0CJ,OAAOI,GAAP,CAAW,UAAX,MAA2B,YAAzE,EAAwF;AACtFF,UAAQK,UAAR,kBAAkCP,OAAOI,GAAP,CAAW,0BAAX,CAAlC;AACD,CAFD,MAEO;AACLF,UAAQM,IAAR,GAAe,WAAf;AACAN,UAAQI,QAAR,GAAmB,QAAnB;AACD;;AAED,IAAMG,KAAKC,gBAAMC,gBAAN,CAAuBT,OAAvB,CAAX;;kBAEe;AACbU,QAAM;AACJC,aAAS,mBAA6B;AAAA,UAA5BC,IAA4B,uEAAvB,EAAuB;AAAA,UAApBC,KAAoB;AAAA,UAAdC,KAAc,uEAAR,GAAQ;;AACpC,UAAMC,IAAIC,OAAOC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAuB;AAAA,eAAON,KAAKO,GAAL,CAAP;AAAA,OAAvB,CAAV;AACA,UAAMC,IAAIJ,OAAOC,IAAP,CAAYL,IAAZ,CAAV;AACA,UAAMS,kBAAgBP,KAAhB,cAA8BD,KAA9B,eAA6CO,CAA7C,QAAN;AACEE,cAAQC,GAAR,CAAYF,GAAZ;AACF,aAAO,IAAIG,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCnB,WAAGoB,KAAH,CAASN,GAAT,EAAaN,CAAb,EAAgB,UAACa,GAAD,EAAKC,OAAL,EAAiB;AAC/B;AACA,cAAGD,GAAH,EAAQ,OAAOF,MAAP;AACND,kBAAQI,OAAR;AACH,SAJD;AAKD,OANM,CAAP;AAOD,KAbG;AAcJC,sBAAkB,4BAA6B;AAAA,UAA5BlB,IAA4B,uEAAvB,EAAuB;AAAA,UAApBC,KAAoB;AAAA,UAAdC,KAAc,uEAAR,GAAQ;;AAC7CQ,cAAQC,GAAR,CAAYV,KAAZ;AACA,UAAME,IAAIC,OAAOC,IAAP,CAAYL,IAAZ,EAAkBM,GAAlB,CAAuB;AAAA,eAAON,KAAKO,GAAL,CAAP;AAAA,OAAvB,CAAV;AACA,UAAMC,IAAIJ,OAAOC,IAAP,CAAYL,IAAZ,CAAV;AACA,UAAMS,kBAAgBP,KAAhB,cAA8BD,KAA9B,eAA6CO,CAA7C,QAAN;AACAE,cAAQC,GAAR,CAAYF,GAAZ,EAAgBN,CAAhB;AACA,aAAO,IAAIS,OAAJ,CAAa,UAACC,OAAD,EAASC,MAAT,EAAoB;AACtCnB,WAAGoB,KAAH,CAASN,GAAT,EAAaN,CAAb,EAAgB,UAACa,GAAD,EAAKC,OAAL,EAAiB;AAC/B;AACA,cAAGD,GAAH,EAAQ,OAAOF,MAAP;AACND,kBAAQI,OAAR;AACH,SAJD;AAKD,OANM,CAAP;AAOD;AA3BG;AADO,C","file":"lists.js","sourcesContent":["import mysql from 'mysql'\n\nconst config = require('../../config')\n\nconst options = {\n  user: config.get('MYSQL_USER'),\n  password: config.get('MYSQL_PASSWORD'),\n  database: 'aappdb'\n}\n\nif( config.get('INSTANCE_CONNECTION_NAME') && config.get('NODE_ENV') === 'production' ) {\n  options.socketPath = `/cloudsql/${config.get('INSTANCE_CONNECTION_NAME')}`\n} else {\n  options.host = 'localhost'\n  options.database = 'aappdb'\n}\n\nconst db = mysql.createConnection(options)\n\nexport default {\n  list: {\n    getList: (data={},table,scope='*') => {\n      const s = Object.keys(data).map( key => data[key] )\n      const k = Object.keys(data)\n      const sql = `SELECT ${scope} from ${table} where ${k}=?;`\n        console.log(sql)\n      return new Promise( (resolve,reject) => {\n        db.query(sql,s, (err,results) => {\n          //console.log('Mann DB: ',results)\n          if(err) return reject\n            resolve(results)\n        })\n      })\n    },\n    getListResources: (data={},table,scope='*') => {\n      console.log(table)\n      const s = Object.keys(data).map( key => data[key] )\n      const k = Object.keys(data)\n      const sql = `SELECT ${scope} from ${table} where ${k}=?;`\n      console.log(sql,s)\n      return new Promise( (resolve,reject) => {\n        db.query(sql,s, (err,results) => {\n          //console.log('Mann DB: ',results)\n          if(err) return reject\n            resolve(results)\n        })\n      })\n    }\n  }\n}\n"]}