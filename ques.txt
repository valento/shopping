CREATE TABLE campaigns (
camp_id integer PRIMARY KEY NOT NULL UNIQUE,
exp_date text NOT NULL,
init_date text NOT NULL,
unit integer DEFAULT 0,
type integer DEFAULT 1,
desciption text,
rules varchar,
active integer DEFAULT 0,
price integer default 0
);



CREATE TABLE proms (
promo_id integer PRIMARY KEY UNIQUE NOT NULL,
domain_id integer NOT NULL,
title text NOT NULL DEFAULT 'Promo',
header text,
description text,
type integer,
discount real,
rule_id varchar,
exp_date text,
timestamp text DEFAULT current_timestamp,
active integer DEFAULT 1,
FOREIGN KEY (domain_id) REFERENCES domains (domain_id) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY (rule_id) REFERENCES rules (rule_id) ON DELETE CASCADE ON UPDATE NO ACTION
);

INSERT INTO proms (domain_id, title, header, type, discount)
VALUES (1,'warehouse cleaning', 'happy merry christmas', 1, 30);

CREATE TABLE rules (
rule_id integer PRIMARY KEY NOT NULL UNIQUE,
type integer,
description text
);

INSERT INTO rules (type, description)
VALUES (1,'All items discount');

INSERT INTO rules (type, description)
VALUES (2,'Discount on second purchased item. Tied to minimum total amount.');

CREATE TABLE coupons (
coupon_id integer UNIQUE PRIMARY KEY NOT NULL,
user_id integer UNIQUE,
camp_id integer NOT NULL,
taken_date text,
used_date text,
FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (camp_id) REFERENCES campaigns (camp_id) ON DELETE NO ACTION ON UPDATE CASCADE);

// ======= STORE ===============================================================

create table products (
product_id integer PRIMARY KEY UNIQUE NOT NULL,
name text NOT NULL,
description text,
img integer,
active integer DEFAULT 1
);

CREATE TABLE prod_props (
prop_id integer PRIMARY KEY UNIQUE NOT NULL,
name text NOT NULL,
prod_id integer NOT NULL,
value varchar NOT NULL,
FOREIGN KEY (prod_id) REFERENCES products (prod_id) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE items (
item_id integer PRIMARY KEY UNIQUE NOT NULL,
product_id INT NOT NULL,
cat_id INT NOT NULL,
domain_id TINYINT NOT NULL DEFAULT 2,
brand_id INT,
price INT NOT NULL,
name TEXT NOT NULL,
description TEXT,
store_id INT,
FOREIGN KEY (category_id) REFERENCES category (uid) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY (store_id) REFERENCES stores (store_id) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY (brand_id) REFERENCES brands (brand_id) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY (campaign_id) REFERENCES campaigns (campaign_id) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY (product_id) REFERENCES products (product_id) ON DELETE CASCADE ON UPDATE NO ACTION,
c_status TINYINT DEFAULT 4,
);

// MYSQL : =====================================================================
// === USERS Table: ============================================================

CREATE TABLE users (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
email VARCHAR(40) NOT NULL UNIQUE,
password VARCHAR(60) NOT NULL UNIQUE,
verified TINYINT unsigned DEFAULT 0,
c_status TINYINT unsigned DEFAULT 4,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group TINYINT unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned DEFAULT 500,
membership INT unsigned NOT NULL DEFAULT 32,
username VARCHAR(20),
gender TINYINT unsigned,
language TINYINT unsigned,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
lastlog DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
bday DATE,
credit INT unsigned DEFAULT 10,
location_id INT unsigned,
rating TINYINT unsigned,
fb_id INT unsigned,
indigo_id INT unsigned
);

INSERT INTO users (email,password,username,bday) VALUES (
'valento@gmail.com',
'sdfih23879osd98&^@£$C',
'Valento',
'2010-10-10'
)

// STORE ======================================================================

CREATE TABLE category (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
name_en TEXT NOT NULL,
name_es TEXT NOT NULL,
c_owner INT DEFAULT 1,
c_group INT DEFAULT 1,
c_permis INT DEFAULT 500,
c_status INT DEFAULT 4,
domain INT DEFAULT null,
parent_id INT DEFAULT NULL,
FOREIGN KEY (parent_id) REFERENCES category (uid)
);

INSERT INTO category (name_en,name_es,domain) VALUES
('clothing','ropa',1),
('clothing','ropa',2),
('footwear','zapatos',1),
('footwear','zapatos',2),
('accessory','accesorios',1),
('accessory','accesorios',2);

INSERT INTO category (name_en,name_es,domain,parent_id) VALUES
('tops','topes',1,1),
('tops','topes',2,2),
('shirts','camisas',1,1),
('shirts','camisas',2,2),
('trousers','pantalones',1,1),
('trousers','pantalones',2,2),
('skirts','faldas',1,1),
('skirts','faldas',2,2),
('swimsuits','playa',1,1),
('swimsuits','playa',2,2),
('shorts','pantalonetas',1,1),
('shorts','pantalonetas',2,2);

CREATE TABLE items (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
mann_id INT NOT NULL,
FOREIGN KEY (mann_id) REFERENCES mann (uid) ON DELETE CASCADE ON UPDATE CASCADE
);


CREATE TABLE resources (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
mann_id INT NOT NULL,
item_id INT NOT NULL,
body TINYINT NOT NULL,
layer TINYINT NOT NULL,
name VARCHAR(30),
c_status TINYINT unsigned DEFAULT 4,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group INT unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned NOT NULL DEFAULT 500,
FOREIGN KEY (mann_id) REFERENCES mann (uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (item_id) REFERENCES items (uid) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO resources (mann_id,item_id,body,layer,name) VALUES
(1,1,1,4,'1_1_4_1'),
(1,1,1,4,'1_1_4_2'),
(1,1,2,2,'1_2_2_1'),
(1,1,2,1,'1_1_2_1'),
(1,1,2,4,'1_2_4_1'),
(1,1,4,4,'1_4_4_1'),
(1,1,8,2,'1_8_2_1'),
(1,1,8,4,'1_8_4_1'),
(1,1,8,4,'1_8_4_2'),
(1,1,8,8,'1_8_8_1'),
(1,1,8,16,'1_8_16_1'),
(1,1,8,16,'1_8_16_2'),
(1,1,16,4,'1_16_4_1'),
(1,1,16,16,'1_16_16_1');

INSERT INTO resources (mann_id,item_id,body,layer,name) values
(1,1,4,8,'1_4_8_1'),
(1,1,4,8,'1_4_8_2'),
(1,1,4,8,'1_4_8_3');

SELECT (body,layer) FROM resource WHERE uid=?;

// MANNEQUINS: ================================================================

CREATE TABLE mann (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group TINYINT unsigned NOT NULL DEFAULT 1,
c_status TINYINT unsigned DEFAULT 16,
c_permis INT unsigned DEFAULT 500,
gender TINYINT unsigned DEFAULT 2,
title_en text,
title_es text,
img_base VARCHAR(512),
img_tumb VARCHAR(512),
dscr_en text,
dscr_es text,
head INT unsigned,
corp INT unsigned,
waist INT unsigned,
legs INT unsigned,
feet INT unsigned,
likes INT unsigned,
rating INT unsigned,
price INT DEFAULT 6
);

UPDATE mann SET dscr_es='Nosotras, las Mujeres, hacemos el futuro posible. Este Mannequin lo hace visible.' WHERE uid=3;

INSERT INTO mann (c_status,title_en,title_es,dscr_en,dscr_es,head,corp,waist,legs,feet) VALUES (
4,'La Catalista','La Catalista',
'The Catalist is the new image of lifestyle. This Mannequin shows the free spirit in controversy and braveness.',
'La Catalista es una onda nueva. Este Mannequin representa el vuelo libre de la mujer innovadora atrevida.',
20,30,4,7,4),
(16,'Altered Carbon','Altered Carbon',
'We, Women, make the future available. This Mannequin makes it foreseeable.',
'Las Mujeres, somos el futuro. Este Mannequin abre una vista hacia aquello.',
4,4,4,4,4),
(16,'Ibiza','Ibiza',
'"No-clothes" is hard to style. This Mannequin makes it easy.',
'"Sin-ropa" es un estilo sofisticado. Este Mannequin lo hace ver fácil',
4,4,4,4,4),
(16,'Tayrona','Tayrona',
'Colombia is the new land of opportunity. "Tayrona" is the new Cote d\'Azur...',
'Colombia es la Nueva Tierra de oportunidades. "Tayrona" es la nueva Costa Azul...',
4,4,4,4,4);

CREATE TABLE mann_actions (
uid VARCHAR(20) PRIMARY KEY UNIQUE NOT NULL,
user_id INTEGER NOT NULL,
mann_id INTEGER NOT NULL,
likes INTEGER,
rate INTEGER,
played INTEGER,
supported INTEGER,
interested INTEGER,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
c_owner INTEGER unsigned NOT NULL DEFAULT 1,
c_group TINYINT unsigned NOT NULL DEFAULT 1,
c_status TINYINT unsigned DEFAULT 16,
c_permis INTEGER unsigned DEFAULT 500,
FOREIGN KEY (user_id) REFERENCES users (uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (mann_id) REFERENCES mann (uid) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO mann_actions (mann_id, user_id, likes) VALUES(
1,1,1
)

// GALLERY: ====================================================================

CREATE TABLE gallery (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
name_es TEXT,
name_en TEXT,
brand_id INT,
brand TEXT,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
c_status TINYINT unsigned DEFAULT 16,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group INT unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned NOT NULL DEFAULT 500
);

CREATE TABLE gall_resources (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
gall_id INT DEFAULT NULL,
itm_id INT DEFAULT NULL,
mann_id INT DEFAULT NULL,
body TINYINT DEFAULT NULL,
layer TINYINT DEFAULT NULL,
name VARCHAR(30),
price INT NOT NULL DEFAULT 0,
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
c_status TINYINT unsigned DEFAULT 4,
c_owner INT unsigned NOT NULL DEFAULT 1,
c_group INT unsigned NOT NULL DEFAULT 1,
c_permis INT unsigned NOT NULL DEFAULT 500,
FOREIGN KEY (mann_id) REFERENCES mann (uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (itm_id) REFERENCES items (uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (gall_id) REFERENCES gallery (uid) ON DELETE CASCADE ON UPDATE CASCADE
);

INSERT INTO gall_resources (name) VALUES
('1006'),
('1013'),
('1015'),
('1018'),
('1020');

INSERT INTO gall_resources (name,c_group,c_permis) VALUES
('1001',2,480),
('1002',2,480),
('1003',2,480),
('1004',2,480),
('1005',2,480),
('1007',2,480),
('1008',2,480),
('1009',2,480),
('1010',2,480),
('1011',2,480),
('1012',2,480),
('1016',2,480),
('1017',2,480),
('1019',2,480);

CREATE TABLE gall_actions (
uid INT AUTO_INCREMENT NOT NULL UNIQUE PRIMARY KEY,
gall_res_id INT,
user_id INT,
name VARCHAR(30),
created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
likes INT,
views INT,
share INT,
save INT,
buy INT,
interested INT,
FOREIGN KEY (gall_res_id) REFERENCES gall_resources (uid) ON DELETE CASCADE ON UPDATE CASCADE,
FOREIGN KEY (user_id) REFERENCES users (uid) ON DELETE CASCADE ON UPDATE CASCADE
);

// =================================================================
echo $PATH
/Users/Valent/Downloads/google-cloud-sdk/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin
export PATH=$PATH:/usr/local/mysql/bin

// =================================================================
// = ROLE BASED ACCESS =============================================
/* --- Object = row */
/* --- Type = table of objects */

// === HARDCODED ====================================================
// === ARRAYS    ============

// == ROLES: ================
role = ['owner','owner_group','other']

// == GROUPS: ================
groups = ['root','officer','vip','fan','user','wheel']
g = [1,2,4,8,16,32]

// == SOCIAL: ================
actions = ['like','dislike','rate','want','coming','interested']

// == PRIVILEGES: ===========
permiss = [
'other_delete', 'other_write', 'other_read',
'group_delete', 'group_write', 'group_read',
'owner_delete', 'owner_write', 'owner_read'
]


// == STATUS: ================
status = ['deleted','inactive','active','canceled','pending']


// == ACTIONS: ===============

// -- ACTIONS TABLE ----------
// - Object: action applies to table or object(row)
CREATE TABLE actions (
title text PRIMARY KEY NOT NULL UNIQUE,
apply_to integer NOT NULL
)

INSERT INTO actions (title,apply_to) VALUES
('delete',1)
('write',1)
('read',1)
('passwd',1)
('activate',1)
(list_all,0);

// -- ACTIONS-IMPLEMENTED -------------------------------------------
// - type: object type = table, e.g. item-object, user-object, promo-object
// - UNIX style actions: delete/write/read,
// - Other actions-privileges: join, buy, preview, wish...
// - status 0: action is valid in any Object-state

CREATE TABLE t_action_implement (
type varchar NOT NULL,
action text NOT NULL,
status integer NOT NULL DEFAULT 0,
PRIMARY KEY (type,action)
)

INSERT INTO t_action_implement (type,action,status) VALUES
('users','delete',0),
('users','write',0),
('users','read',0),
('products','delete',0),
('products','write',0),
('products','read',0),
('items','delete',0),
('items','write',0),
('items','read',0),
('proms','delete',0),
('proms','write',0),
('proms','read',0),
('proms','activate',2);

//



1|clothing|1|0|1
2|clothing|2|0|1
3|footwear|1|0|1
4|footwear|2|0|1
5|accessories|1|0|1
6|accessories|2|0|1

7|tops|1|1|1
8|tops|2|2|1
9|shirts|1|1|1
10|shirts|2|2|1
11|trousers|1|1|1
12|trousers|2|2|1
13|suits|1|1|1
14|dresses|2|2|1
15|underwear|1|1|1
16|underwear|2|2|1
17|skirts|2|2|1

18|oxford|1|3|1
19|boots|1|3|1
20|loafers|1|3|1
21|moccasins|1|3|1
22|sandals|1|3|1
23|flip-flops|1|3|1
24|boots|2|4|1
25|heels|2|4|1
26|straps|2|4|1
27|platforms|2|4|1
28|sandals|2|4|1
29|flats|2|4|1
30|sneakers|2|4|1
31|sneakers|1|3|1
32|flip-flops|2|4|1
33|monks|1|3|1
34|moccasins|2|4|1

35|dress|1|9|1
36|T-shirt|1|9|1
37|polo|1|9|1
38|casual|1|9|1
39|sleeveless|1|9|1

40|oxford|2|10|1
41|tunic|2|10|1
42|corset|2|10|1
43|blouse|2|10|1
44|gypsy|2|10|1
45|tuxedo|2|10|1
46|sweetheart|2|10|1
47|western|2|10|1
48|overskirt|2|10|1

49|coats|1|7|1
50|jackets|1|7|1
51|sweaters|1|7|1
52|cardigan|1|7|1

53|coats|2|8|1
54|jackets|2|8|1
55|sweaters|2|8|1
56|cardigan|2|8|1

57|pea|2|53|1
58|reefers|2|53|1
59|trenches|2|53|1
60|duffle|2|53|1
61|wrap|2|53|1
62|swing|2|53|1
63|princes|2|53|1
64|covert|1|49|1
65|pea|1|49|1
66|trench|1|49|1
67|duffel|1|49|1
68|British warm|1|49|1
69|cape|2|53|1
70|capelet|2|53|1
71|quilted parka|2|53|1
72|quilted parka|1|49|1
73|frock|2|53|1
74|frock|1|49|1
75|blazer|1|7|1
76|blazer|2|8|1
77|shorts|1|1|1
78|shorts|2|2|1


// === REDUX Store Data Models: ================================================

mannequin: {
    id: 'vale',
    head: {// category: accessory: scarf
      top: {
        index: 0,
        library: [],
        active: false
      },
      over: 0,// glasses
      main: {// hat
        index: 0,
        library: [],
        active: false
      },
      under: 0,// scarf/neckless
      skin: 0,// earing
    },
    corp: {
      top: 0,// clothes: top
      over: 0,// top/shirt
      main: 0,// shirt
      under: 0,// shirt
      skin: 0// swim/underwear
    },
    waist: {
      top: 0,// accessory
      over: 0,//
      main: 0,//skirt/shorts
      under: 0,//
      skin: 0// underwear/swim
    },
    legs: {
      top: 0,// scarf
      over: 0,// skirt
      main: 0,// trousers
      under: 0// socks/underwear
    },
    foot: {
      top: 0,access
      over: 0,access
      main: 0,// shoes
      under: 0//socks
    }
  },
  proms: [],
  user: {}
}


================================================================================
======= INDIEGOGO ===========================================================
================================================================================
Campaign Overview:

In an inspiring attempt to improve online shopping experience, here we present our Mannequin Doll - a
Web Application. Mannequin Doll App. explores modern techniques to promote fashion through gameable user experience.
Mannequin Doll App. will periodically publish Mannequins showcasing wearable fashion products in a unique,
pleasant and entertaining style. Our audience will enjoy beautiful models, diverse styling and innovative
user interface and experience. Shopping will be fun again!


=====================================================
Short Summary:

Contributors fund ideas they can be passionate about and to people they trust. Here are some things to do in this section:

Introduce yourself and your background.
Briefly describe your campaign and why it's important to you.
Express the magnitude of what contributors will help you achieve.
Remember, keep it concise, yet personal. Ask yourself: if someone stopped reading here would they be ready to make a contribution?

What We Need & What You Get
What we spend money for:

Our Mobile platform is deployed on Google App Engine - that costs us monthly fee for Virtual Machines, cloud data base and storage. Cloud services can get expensive on production - yet they give us secure and scalable environment.
Our Mannequin productions take professional models, photography staging and sometimes exotic locations. We spend good money to ensure good looking, but we believe it's worth it.
We will keep maintaining our digital environment regardless the success of this crowd funding. But with the help of community funding we will develop more exciting features - like glamour mannequins, loyalty shopping coupons, realtime user interactions, live sessions,  models' Story-telling, random events actions, etc.

Crowdfunding will also help us produce and publish many and more exciting Mannequin Dolls - we have plenty of ideas how to mix shopping, fashion and entertainment.

Only Contributors will have access to the more exciting productions. Your contribution will make you part of The Catalista Club. The level of your Membership will give you access to our special model events during the year (of course you'll also need to be close to our location, but we move a lot)

The Impact
We won't change the world. But: We can entertain and help your fashion and good looks. We can also improve your shopping choices and help you trade better with designers by exchanging your passion for good discounts.

Mannequin Doll is a just a pilot micro-service included into a bigger privately funded project - The Catalista Club. Contributors will become members of that club - we keep record of our contributers through this service's API

Risks & Challenges
This is a just a pilot feature from a bigger privately funded project - The Catalista Club. Our goal is to introduce and test some of our digital features as micro-services. Mannequin Doll is just the beginning!

Other Ways You Can Help
If this isn't the project you were looking for please pass the word to your friends - sure some will get entertained

And that's all there is to it.
